package com.bfs.logindemo.service;

import com.bfs.logindemo.dao.ChoiceDao;
import com.bfs.logindemo.dao.QuestionDao;
import com.bfs.logindemo.domain.Choice;
import com.bfs.logindemo.domain.Question;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class QuestionService {

    private final QuestionDao questionDao;
    private final ChoiceDao choiceDao;

    public QuestionService(QuestionDao questionDao, ChoiceDao choiceDao) {
        this.questionDao = questionDao;
        this.choiceDao = choiceDao;
    }

    public List<Question> findAllQuestions() {
        return questionDao.findAll();
    }

    public List<Question> findByCategory(int categoryId) {
        return questionDao.findByCategory(categoryId);
    }

    public Question findById(int questionId) {
        return questionDao.findById(questionId);
    }

    public void createQuestion(Question question) {
        questionDao.save(question);
    }

    public void updateQuestion(Question question) {
        questionDao.update(question);
    }

    public void deleteQuestion(int questionId) {
        questionDao.delete(questionId);
    }

    public void setQuestionActive(int questionId, boolean active) {
        questionDao.setActive(questionId, active);
    }

    // create a new question based on categoryId, desc, active and returns the questionId automatically generated by the database
    public int createQuestion(int categoryId, String description, boolean active) {
        Question q = new Question();
        q.setCategoryId(categoryId);
        q.setDescription(description);
        q.setActive(active);
        questionDao.save(q);
        return q.getQuestionId();
    }

    // new options
    public void createChoice(int questionId, String desc, boolean isCorrect) {
        Choice c = new Choice();
        c.setQuestionId(questionId);
        c.setDescription(desc);
        c.setCorrect(isCorrect);
        choiceDao.save(c);
    }

    public void updateQuestion(int questionId, int categoryId, String description, boolean active) {
        Question q = questionDao.findById(questionId);
        if (q != null) {
            q.setCategoryId(categoryId);
            q.setDescription(description);
            q.setActive(active);
            questionDao.update(q);
        }
    }

    public void updateChoice(int choiceId, String desc, boolean isCorrect) {
        Choice c = choiceDao.findById(choiceId);
        if (c != null) {
            c.setDescription(desc);
            c.setCorrect(isCorrect);
            choiceDao.update(c);
        }
    }

    public List<Choice> findChoicesByQuestion(int questionId) {
        return choiceDao.findByQuestion(questionId);
    }
}
